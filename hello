<!DOCTYPE html>
<html lang="en">
   <head>
      <meta charset="UTF-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>ZARK SPAM SHARE‚ù§Ô∏è</title>
      <link rel="stylesheet" href="styles.css">
      <link rel="icon" href="https://i.imgur.com/7Tsdai8.jpeg">
   </head>
   <body>
            <form onsubmit="submitForm(event)" 
               <div class="form-item">
                  <label for="cookies">FBSTATE:</label>
                  <input type="text" id="cookies" name="cookie"style="font-size: 18px; color:blue; placeholder="">
               </div>
               <div class="form-item">
                  <label for="urls">PUBLIC POST LINK:</label>
                  <input type="text" id="urls" name="url"style="font-size: 18px; color:red; placeholder="">
               </div>
               <div class="form-item">
                  <label for="amounts">LIMIT:</label>
                  <input type="text" id="amounts" name="amount"style="font-size: 18px; color:blue; placeholder="">
               </div>
               <div class="form-item">
                  <label for="intervals">DELAY EXAMPLE 1:</label>
                  <input type="text" id="intervals" name="interval"style="font-size: 18px; color:red; placeholder="" pattern="[0-9]*">
               </div>
               <div class="form-item">
                  <button type="submit" id="submit-button">Submit</button>
               </div>
               <div class="form-item">
                  <div id="result"></div>
         <div class="wrapper-container">
         <div class="container">
            <h1>üìå TAKE NOTE:</h1>
            <p>If there is no additional share, please resubmit</p>
      <script src="script.js"></script>
        </div>
      </div>
   </body>
</html>

body {
  font-family: Arial, sans-serif;
  background-image: url('https://i.ibb.co/DV097cF/8cd632d1be81bb70020f2e54cacd02fd.gif');
  background-size: cover;
  background-repeat: no-repeat;
  background-attachment: fixed;
  background-color #00ff00:
    color: #333;
  padding: 24px;
}

.form-item {
  padding: 13px;
}

h1 {
  color: Blue;
}

.form-item label {
  font-size: 15px;
  color: blue;
  margin-bottom: 5px;
  display: block;
}

input,
button {
  background: white;
  color: #fff;
  border: solid 2px red;
  box-sizing: border-box;
  width: 100%;
  margin-bottom: 9px;
  padding: 17px;
  border-radius: 10px;
  font-size: 16px;
  opacity: 0.3;
}

button {
  cursor: none;
  color: #0a0a0a;
  background-color: green;
}

button:hover {
  background: #CCC;
}

#result {
  display: none;
  text-align: center;
  background-color: #ededed;
  border: solid 1px #222;
  padding: 10px;
  border-radius: 4px;
  color: #0a0a0a;
}
.container {
  background: white;
  color: black;
  border: solid 2px red;
  box-sizing: border-box;
  width: 100%;
  margin-bottom: 9px;
  padding: 17px;
  border-radius: 10px;
  font-size: 16px;
  opacity: 0.5;
}

async function submitForm(event) {
   event.preventDefault();
   const result = document.getElementById('result');
   const button = document.getElementById('submit-button');
   try {
     result.style.display = 'block';
     button.style.display = 'none';
     const response = await fetch('/api/submit', {
       method: 'POST',
       body: JSON.stringify({
         cookie: document.getElementById('cookies').value,
         url: document.getElementById('urls').value,
         amount: document.getElementById('amounts').value,
         interval: document.getElementById('intervals').value,
       }),
       headers: {
         'Content-Type': 'application/json',
       },
     });
     const data = await response.json();

     if (data.status === 200) {
       result.style.backgroundColor = '#32ff0dc7';
       result.style.color = '#222';
       result.innerHTML = 'Submitted successfully!';
       button.style.display = 'block';
     } else {
       result.style.backgroundColor = '#3D1619';
       result.style.color = '#FE6265';
       result.innerHTML = 'Error: ' + data.error;
       button.style.display = 'block';
     }
   } catch (e) {
     console.error(e);
   }
}

async function linkOfProcessing() {
   try {
     const container = document.getElementById('processing');
     const processContainer = document.getElementById('process-container');
     const initialResponse = await fetch('/total');

     if (!initialResponse.ok) {
       throw new Error(`Failed to fetch: ${initialResponse.status} - ${initialResponse.statusText}`);
     }

     const initialData = await initialResponse.json();
     if (initialData.length === 0) {
       processContainer.style.display = 'none';
       return;
     }
     initialData.forEach((link, index) => {

       let { url, count, id, target, session } = link;
       const processCard = document.createElement('div');
       processCard.classList.add('current-online');

       const text = document.createElement('h4');
       text.classList.add('count-text');
       text.innerHTML = `${index + 1}. ID: ${id} | ${count}/${target}`;

       processCard.appendChild(text);
       container.appendChild(processCard);

       const intervalId = setInterval(async () => {
         const updateResponse = await fetch('/total');

         if (!updateResponse.ok) {
           console.error(`Failed to fetch update: ${updateResponse.status} - ${updateResponse.statusText}`);
           return;
         }

         const updateData = await updateResponse.json();
         const updatedLink = updateData.find((link) => link.session === session);

         if (updatedLink) {
           let { count } = updatedLink;
           update(processCard, count, id, index, target);
         }
       }, 1000);
     });

   } catch (error) {
     console.error(error);
   }
}

function update(card, count, id, index, target) {
   let container = card.querySelector('.count-text');
   container.textContent = `${index + 1}. ID: ${id} | ${count}/${target}`;
}

linkOfProcessing();
